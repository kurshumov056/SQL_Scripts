IMPORT 

--------------------------------------------------------------------------------------------------------
                                         NETFLIX DATA SET EXERCISES 
--------------------------------------------------------------------------------------------------------
copy socio_econ
FROM 'C:\Users\Public\soci_econ_country_profiles.csv'
DELIMITER ','
CSV HEADER;

SELECT title,rating,country,release_year,director
FROM movies
WHERE director LIKE 'Michael Bay'
ORDER BY release_year

SELECT title,country,duration_in_minutes,date_added
FROM movies
WHERE date_added <= '2011-02-31'
ORDER BY duration_in_minutes

SELECT title,country,duration_in_minutes,release_year
FROM movies
WHERE release_year BETWEEN 2014 AND 2016
ORDER BY duration_in_minutes DESC

SELECT title,director,country,duration_in_minutes
FROM movies
WHERE duration_in_minutes BETWEEN 3 AND 4
ORDER BY duration_in_minutes DESC

SELECT title,director,rating,num_of_seasons
FROM series
WHERE num_of_seasons BETWEEN 10 AND 14
ORDER BY num_of_seasons

SELECT title,director,rating,num_of_seasons 
FROM SERIES 
WHERE director IS NOT NULL AND num_of_seasons > 7

SELECT title, director, cast, country, rating
FROM movies 
WHERE cast LIKE '%Ryan Reynolds%' AND '%Nicolas Cage%'


SELECT title,director,country,duration_in_minutes, rating
FROM movies
WHERE rating = 'PG' and duration_in_minutes > 3

SELECT title,director,country,release_year
FROM series
WHERE release_year IN (2014,2016,2018)
ORDER BY title

--------------------------------------------------------------------------------------------------------
                                    |   JOB ADVERTS DATA ANALYSIS |
--------------------------------------------------------------------------------------------------------

SELECT * FROM jobs

SELECT job_id,job_title,salary_estimate_min,salary_estimate_max 
FROM jobs

1

SELECT job_id,job_title,salary_estimate_min,salary_estimate_max 
FROM jobs
WHERE CAST(REPLACE(salary_estimate_max,'K', '') AS INT) < 105


2

SELECT company_name,company_rank,company_size_min, company_size_max
FROM jobs
WHERE CAST(REPLACE(company_size_min,'Employees','')AS INT) BETWEEN 50 AND 120

3


SELECT job_id, UPPER(job_title) AS 'upper_jobtitle', LOWER(company_name) AS 'lower_companyname'
FROM jobs

4

SELECT job_id,company_name,headquarters_of_company, LEFT(company_name, 1), LEFT(headquarters_of_company, 1)
FROM jobs

5

SELECT job_id,company_name,headquarters_of_company
, CONCAT(LEFT(company_name,1) || LEFT(headquarters_of_company,1)) AS "company_code"
FROM jobs

6

SELECT job_id,company_name,headquarters_of_company
, LOWER(CONCAT(LEFT(company_name,1) || LEFT(headquarters_of_company,1))) AS "company_code"
FROM jobs

7

SELECT job_title
FROM jobs
WHERE LENGTH(job_title) > 29

8 

SELECT company_name, company_rank,company_market_value
,ROUND(company_market_value,2) AS "round_mv"
,FLOOR(company_market_value) AS "floor_mv"
,CEIL(company_market_value) AS "ceil_mv"
FROM jobs
-------------------------------------------------------------------------------------
                                 PART 2
-------------------------------------------------------------------------------------

SELECT * FROM jobs

1

SELECT job_id,job_title,published_date,removed_date
FROM jobs
WHERE EXTRACT(YEAR FROM published_date) = 2016


2

SELECT job_id,job_title,published_date,removed_date
FROM jobs
WHERE EXTRACT(YEAR FROM published_date) = 2017 AND  DATE_PART('month', published_date)=01

3

SELECT job_id, job_title, published_date, removed_date
FROM jobs
WHERE DATE_PART('day', removed_date - published_date) = 1


4

SELECT job_id, job_title, published_date, removed_date
FROM jobs
WHERE DATE_PART('month',published_date) = DATE_PART('month', CURRENT_DATE)
AND
DATE_PART('day', published_date) = DATE_PART('day', CURRENT_DATE )


5


SELECT job_id, job_title, published_date, removed_date
FROM jobs
WHERE published_date > removed_date

6

SELECT job_id,job_title,published_date, removed_date,company_name,headquarters_of_company
FROM jobs
WHERE removed_date IS NULL 
OR company_name IS NULL
OR headquarters_of_company IS NULL

7 

SELECT job_id, job_title, 
       COALESCE(removed_date, CURRENT_DATE) AS "removed_date",
       COALESCE(headquarters_of_company, state_of_company) AS "headquarters_of_company",
       COALESCE(company_name, 'Not Available') AS "company_name"
FROM jobs 
WHERE removed_date IS NULL OR 
      company_name IS NULL OR 
      headquarters_of_company IS NULL

SELECT * FROM jobs



8

SELECT company_name,company_market_value, 
	CASE 
		WHEN company_market_value BETWEEN 0 AND 300 THEN 'low range'
		WHEN company_market_value BETWEEN 301 AND 600 THEN 'mid range'
		WHEN company_market_value BETWEEN 601 AND 900 THEN 'high range'
		ELSE 'other range'
	END 
	 AS "company_market_value_rank"
FROM jobs

SELECT * FROM jobs

9


SELECT job_title, company_name, company_size_min, company_size_max, 
         CASE WHEN CAST(REPLACE(company_size_max, ' Employees', '') AS INT) <= 60 THEN 'Small Company'
                  WHEN CAST(REPLACE(company_size_max, ' Employees', '') AS INT) <=  120 THEN 'Medium Company'
            WHEN CAST(REPLACE(company_size_max, ' Employees', '') AS INT) <=  180 THEN 'Large Company'
            ELSE 'Unknown'
            END AS "company_size"
FROM   jobs

--------------------------------------------------------------------------------------------------------
                                            TRACKS PROJECT 
--------------------------------------------------------------------------------------------------------
SELECT * FROM tracks


-----1-----


SELECT artist, COUNT(track_id) AS "Number of Tracks"
FROM tracks
GROUP BY artist


-----2-----


SELECT genre, ROUND(AVG(duration),2)
FROM tracks
GROUP BY genre
ORDER BY AVG(duration) DESC


----3-----


SELECT artist, MIN(danceability) AS "Low Danceability", MAX(danceability) AS "High Danceability"
, AVG(danceability) AS "Avg Danceability"
FROM tracks
WHERE artist IN ('Queen', 'The Beatles')
GROUP BY artist



----4----


SELECT genre, COUNT(track_id) 
FROM tracks
WHERE genre IN ('Art Pop','Dance Pop','Candy Pop')
GROUP BY genre


----5-----


SELECT artist, COUNT(track_id) AS "Num of Tracks", MAX(popularity) AS "Highest Popularity"
, MIN(popularity) AS "Lowest Popularity"
FROM tracks 
GROUP BY artist
ORDER BY COUNT(track_id) DESC


-----6-----

SELECT COUNT(track_id) AS "number_of_tracks"
FROM tracks 
WHERE release_year BETWEEN 2005 AND 2010
GROUP BY genre
HAVING COUNT(*) > 10








